name: IPv6

on:
  workflow_dispatch:
    inputs:
      ckb_version:
        description: 'CKB Version'
        required: false
        default: '0.202.0'
      max_retries:
        description: 'Maximum hole_punching retry attempts'
        required: false
        default: '15'

jobs:
  ipv6:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Replace CKB version in Dockerfile
        run: |
          echo "Using CKB version: ${{ github.event.inputs.ckb_version }}"
          sed -i "s|registry.cn-hangzhou.aliyuncs.com/scz996/ckb:[0-9.]\+-ipv4|registry.cn-hangzhou.aliyuncs.com/scz996/ckb:${{ github.event.inputs.ckb_version }}-ipv6|g" Dockerfile

      - name: Start Containers
        run: |
          docker compose up -d

          echo "Waiting for stun_server to be ready..."
          for i in {1..10}; do
          docker exec stun_server /bin/ckb --version && break
          echo "Retry $i: not ready yet"
            sleep 3
            done
              
          docker exec stun_server /bin/ckb --version || {
            echo "stun_server failed to start"
            exit 1
          }

      - name: Check IP Prefixes and Reconfigure Routing
        run: |
          extract_ipv6_prefix() {
            ip=$1
            expanded=$(python3 -c "import ipaddress; print(ipaddress.IPv6Address(u'$ip').exploded)")
            echo "$expanded" | cut -d':' -f1-4 | tr '[:lower:]' '[:upper:]'
          }
          
          for attempt in {1..10}; do
            echo "Attempt $attempt to get non-overlapping IPs..."

            stun_server_node_id=$(docker exec stun_server ./ckb-cli rpc local_node_info | grep node_id | awk '{print $2}')
            echo "stun_server_node_id: $stun_server_node_id"

            stun_server_ip6=$(docker exec stun_server ip -6 addr show eth0 | grep 'inet6' | grep 'scope global' | awk '{print $2}' | cut -d'/' -f1)
            nat1_gateway_ip6=$(docker exec nat1_gateway ip -6 addr show eth0 | grep 'inet6' | grep 'scope global' | awk '{print $2}' | cut -d'/' -f1)
            nat2_gateway_ip6=$(docker exec nat2_gateway ip -6 addr show eth0 | grep 'inet6' | grep 'scope global' | awk '{print $2}' | cut -d'/' -f1)

            echo "stun_server_ip6: $stun_server_ip6"
            echo "nat1_gateway_ip6: $nat1_gateway_ip6"
            echo "nat2_gateway_ip6: $nat2_gateway_ip6"

            prefix1=$(extract_ipv6_prefix "$stun_server_ip6")
            prefix2=$(extract_ipv6_prefix "$nat1_gateway_ip6")
            prefix3=$(extract_ipv6_prefix "$nat2_gateway_ip6")

            echo "Prefixes: $prefix1 | $prefix2 | $prefix3"

            if [ "$prefix1" != "$prefix2" ] && [ "$prefix1" != "$prefix3" ] && [ "$prefix2" != "$prefix3" ]; then
              echo "All IP prefixes are unique: $prefix1, $prefix2, $prefix3"
              break
            fi

            echo "Duplicate prefixes detected ($prefix1, $prefix2, $prefix3). Restarting containers..."
            docker compose down --remove-orphans
            docker compose up -d

            echo "Waiting for stun_server to be ready..."
            for i in {1..10}; do
            docker exec stun_server /bin/ckb --version && break
            echo "Retry $i: not ready yet"
              sleep 3
              done

            docker exec stun_server /bin/ckb --version || {
              echo "stun_server failed to start"
              exit 1
            }

            if [ "$attempt" = "10" ]; then
              echo "Failed to get unique IP prefixes after 10 attempts. Exiting."
              exit 1
            fi
          done

          echo "Setting up routing..."
          docker exec peer1 sh -c "ip -6 route del default && ip -6 route add default via $nat1_gateway_ip6"
          docker exec peer2 sh -c "ip -6 route del default && ip -6 route add default via $nat2_gateway_ip6"

          docker exec peer1 sh -c "ip -6 route"
          docker exec peer2 sh -c "ip -6 route"

          echo "stun_server_node_id=$stun_server_node_id" >> "$GITHUB_ENV"
          echo "stun_server_ip6=$stun_server_ip6" >> "$GITHUB_ENV"

      - name: Ping stun_server from peer1 and peer2
        run: |
          docker exec peer1 ping6 -c 4 ${{ env.stun_server_ip6 }}
          docker exec peer2 ping6 -c 4 ${{ env.stun_server_ip6 }}

      - name: Add stun_server to peer1 and peer2
        run: |
          docker exec peer1 curl -X POST http://127.0.0.1:8114 \
            -H 'Content-Type: application/json' \
            -d '{
              "id": 1,
              "jsonrpc": "2.0",
              "method": "add_node",
              "params": [
                "'"${{ env.stun_server_node_id }}"'",
                "/ip6/'"$stun_server_ip6"'/tcp/8115"
              ]
            }'

          docker exec peer2 curl -X POST http://127.0.0.1:8114 \
            -H 'Content-Type: application/json' \
            -d '{
              "id": 1,
              "jsonrpc": "2.0",
              "method": "add_node",
              "params": [
                "'"${{ env.stun_server_node_id }}"'",
                "/ip6/'"$stun_server_ip6"'/tcp/8115"
              ]
            }'

      - name: Generate block on stun_server
        run: |
          docker exec stun_server curl -X POST http://127.0.0.1:8114 \
            -H "Content-Type: application/json" \
            -d '{"id": 2, "jsonrpc": "2.0", "method": "generate_block", "params": []}'

      - name: Get peers on all nodes
        run: |
          docker exec peer1 ./ckb-cli rpc get_peers | grep address:
          docker exec peer2 ./ckb-cli rpc get_peers | grep address:
          docker exec stun_server ./ckb-cli rpc get_peers | grep address:

      - name: Get peer2 node ID
        run: |
          peer2_node_id=$(docker exec peer2 ./ckb-cli rpc local_node_info | grep node_id | awk '{print $2}')
          echo "peer2_node_id=$peer2_node_id" >> "$GITHUB_ENV"

      - name: Wait for 'success' in Peer1 Logs (Retry with Hole Punching)
        run: |
          max_retries=${{ github.event.inputs.max_retries }}
          
          for attempt in $(seq 1 "$max_retries"); do
            echo "Attempt $attempt: Executing hole punching..."
            docker exec peer1 curl -X POST http://127.0.0.1:8114 \
              -H 'Content-Type: application/json' \
              -d '{
                "id": 2,
                "jsonrpc": "2.0",
                "method": "hole_punching",
                "params": ["'"${{ env.peer2_node_id }}"'"]
              }' || true
            echo
          
            echo "Sleeping 60 seconds after hole punching (attempt $attempt)..."
            sleep 60
          
            docker logs peer1 --tail 20 || true
          
            if docker logs peer1 --tail 20 2>/dev/null | grep -q "NAT traversal success"; then
              echo "'NAT traversal success' found in peer1 logs. Done."
              exit 0
            fi
          done
          
          echo "'NAT traversal success' not found after $max_retries attempts. Exiting with failure."
          exit 1

      - name: Get peers on all nodes again
        run: |
          echo "Peer1's peers:"
          docker exec peer1 ./ckb-cli rpc get_peers | grep address:
          echo "Peer2's peers:"
          docker exec peer2 ./ckb-cli rpc get_peers | grep address:
