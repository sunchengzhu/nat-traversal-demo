name: IPv4

on:
  workflow_dispatch:

jobs:
  ipv4:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start Containers
        run: |
          docker compose up -d

          echo "Waiting for stun_server to be ready..."
          for i in {1..10}; do
          docker exec stun_server /bin/ckb --version && break
          echo "Retry $i: not ready yet"
            sleep 3
            done
              
          docker exec stun_server /bin/ckb --version || {
            echo "stun_server failed to start"
            exit 1
          }

      - name: Check IP Prefixes and Reconfigure Routing
        run: |
          for attempt in {1..10}; do
            echo "Attempt $attempt to get non-overlapping IPs..."

            stun_server_node_id=$(docker exec stun_server ./ckb-cli rpc local_node_info | grep node_id | awk '{print $2}')
            echo "stun_server_node_id: $stun_server_node_id"

            stun_server_ip4=$(docker exec stun_server ip -4 addr | grep 'inet' | grep 'eth0' | awk '{print $2}' | cut -d'/' -f1)
            nat1_gateway_ip4=$(docker exec nat1_gateway ip -4 addr | grep 'inet' | grep 'eth0' | awk '{print $2}' | cut -d'/' -f1)
            nat2_gateway_ip4=$(docker exec nat2_gateway ip -4 addr | grep 'inet' | grep 'eth0' | awk '{print $2}' | cut -d'/' -f1)

            echo "stun_server_ip4: $stun_server_ip4"
            echo "nat1_gateway_ip4: $nat1_gateway_ip4"
            echo "nat2_gateway_ip4: $nat2_gateway_ip4"

            prefix1=$(echo "$stun_server_ip4" | cut -d'.' -f1,2)
            prefix2=$(echo "$nat1_gateway_ip4" | cut -d'.' -f1,2)
            prefix3=$(echo "$nat2_gateway_ip4" | cut -d'.' -f1,2)

            if [ "$prefix1" != "$prefix2" ] && [ "$prefix1" != "$prefix3" ] && [ "$prefix2" != "$prefix3" ]; then
              echo "All IP prefixes are unique: $prefix1, $prefix2, $prefix3"
              break
            fi

            echo "Duplicate prefixes detected ($prefix1, $prefix2, $prefix3). Restarting containers..."
            docker compose down --remove-orphans
            docker compose up -d

            echo "Waiting for stun_server to be ready..."
            for i in {1..10}; do
            docker exec stun_server /bin/ckb --version && break
            echo "Retry $i: not ready yet"
              sleep 3
              done
            
            docker exec stun_server /bin/ckb --version || {
              echo "stun_server failed to start"
              exit 1
            }

            if [ "$attempt" = "10" ]; then
              echo "Failed to get unique IP prefixes after 10 attempts. Exiting."
              exit 1
            fi
          done

          echo "Setting up routing..."
          docker exec peer1 sh -c "ip route del default && ip route add default via $nat1_gateway_ip4"
          docker exec peer2 sh -c "ip route del default && ip route add default via $nat2_gateway_ip4"

          docker exec peer1 sh -c "ip route"
          docker exec peer2 sh -c "ip route"

          echo "stun_server_node_id=$stun_server_node_id" >> "$GITHUB_ENV"
          echo "stun_server_ip4=$stun_server_ip4" >> "$GITHUB_ENV"

      - name: Ping stun_server from peer1 and peer2
        run: |
          docker exec peer1 ping -c 4 ${{ env.stun_server_ip4 }}
          docker exec peer2 ping -c 4 ${{ env.stun_server_ip4 }}

      - name: Add stun_server to peer1 and peer2
        run: |
          docker exec peer1 curl -X POST http://127.0.0.1:8114 \
            -H 'Content-Type: application/json' \
            -d '{
              "id": 1,
              "jsonrpc": "2.0",
              "method": "add_node",
              "params": [
                "'"${{ env.stun_server_node_id }}"'",
                "/ip4/${{ env.stun_server_ip4 }}/tcp/8115"
              ]
            }'

          docker exec peer2 curl -X POST http://127.0.0.1:8114 \
            -H 'Content-Type: application/json' \
            -d '{
              "id": 1,
              "jsonrpc": "2.0",
              "method": "add_node",
              "params": [
                "'"${{ env.stun_server_node_id }}"'",
                "/ip4/${{ env.stun_server_ip4 }}/tcp/8115"
              ]
            }'

      - name: Generate block on stun_server
        run: |
          docker exec stun_server curl -X POST http://127.0.0.1:8114 \
            -H "Content-Type: application/json" \
            -d '{"id": 2, "jsonrpc": "2.0", "method": "generate_block", "params": []}'

      - name: Get peers on all nodes
        run: |
          docker exec peer1 ./ckb-cli rpc get_peers | grep address:
          docker exec peer2 ./ckb-cli rpc get_peers | grep address:
          docker exec stun_server ./ckb-cli rpc get_peers | grep address:

      - name: Get peer2 node ID
        run: |
          peer2_node_id=$(docker exec peer2 ./ckb-cli rpc local_node_info | grep node_id | awk '{print $2}')
          echo "peer2_node_id=$peer2_node_id" >> "$GITHUB_ENV"

      - name: Hole punching from peer1 to peer2
        run: |
          docker exec peer1 curl -X POST http://127.0.0.1:8114 \
            -H 'Content-Type: application/json' \
            -d '{
              "id": 2,
              "jsonrpc": "2.0",
              "method": "hole_punching",
              "params": ["'"${{ env.peer2_node_id }}"'"]
            }' && echo

      - name: Wait for 'success' in Peer1 Logs (Retry with Hole Punching)
        run: |
          for attempt in 1 2 3; do
            if [ "$attempt" = "1" ]; then
              echo "Initial wait: 60 seconds..."
              sleep 60
            else
              echo "Waiting 5 minutes before retrying (attempt $attempt)..."
              sleep 300
            fi

            echo "Checking last 20 lines of peer1 logs (attempt $attempt):"
            docker logs peer1 --tail 20 || true

            if docker logs peer1 --tail 20 2>/dev/null | grep -q "NAT traversal success"; then
              echo "'NAT traversal success' found in peer1 logs. Done."
              exit 0
            fi

            if [ "$attempt" -lt 3 ]; then
              echo "'success' not found. Re-executing hole punching..."
              docker exec peer1 curl -X POST http://127.0.0.1:8114 \
                -H 'Content-Type: application/json' \
                -d '{
                  "id": 2,
                  "jsonrpc": "2.0",
                  "method": "hole_punching",
                  "params": ["'"${{ env.peer2_node_id }}"'"]
                }' || true
              echo
            else
              echo "'success' not found after 3 attempts. Exiting with failure."
              exit 1
            fi
          done

      - name: Get peers on all nodes again
        run: |
          docker exec peer1 ./ckb-cli rpc get_peers | grep address:
          docker exec peer2 ./ckb-cli rpc get_peers | grep address:
          docker exec stun_server ./ckb-cli rpc get_peers | grep address:
